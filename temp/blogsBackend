#!/usr/bin/env bash

# stop on errors
set -e

# to echo
# set -x

usage () {
  echo "patientor <command>"
  echo ""
  echo "Commands:"
  echo "---------"
  echo "up                        | builds the production docker container"
  echo "down                      | shuts down the container"
  echo "down:dev                  | shuts down the development container and removes all volumes and orphans"
  echo "up:dev                    | builds the developmnent container"
  echo "restart                   | restarts the production container without building"
  echo "restart:dev               | restarts the developmnent container without building"
  echo "server:bash               | opens a bash session in the server" 
  echo "db:post                   | opens a cli for postgress commands"
  echo "exercise13.3-db:postgres  | opens cli for postgres commands for exercise 13 database"
  echo "exercise13.3-db:run       | builds and runs the comtainer for postgres db for exercise 13"
  echo "exercise13.3-db:down      | removes the docker container for the db for exercise 13"
  # echo "build           | applies docker compose to start the API stack"
  # echo "db:init         | sets up the development database; will delete the existing data if it exists"
  # echo "db:shell        | opens a mysql shell on the mariadb container"
  # echo "getSecrets      | generally one-time S3 download of any dev secrets files - requires AWS profile and access key"
  # echo "log             | tail the production log"
  # echo "reset           | deletes the docker images for the API and DB"
  # echo "server          | starts the development server"
  # echo "ui:bash         | opens a bash shell on the EmberJS client container"
  # echo "ui:test         | runs test suite for UI"
  # echo "ui:fixtures     | builds and lints the fixtures"
  # echo "ui:watch-css    | builds and watches css"
}

if [ -z $1 ]
then
  usage
  exit 0
fi

COMMAND=$1

shift

REST_ARGS=$*

PROJECT=patientor
API="${PROJECT}-web-1"
UI="${PROJECT}-ux-1"
DB="${PROJECT}-db-1"
ADMINER="${PROJECT}-adminer-1"

up () {
  docker compose up --build
}

up:dev () {
  docker compose -f docker-compose.dev.yml up --build
}

restart:dev () {
  docker compose -f docker-compose.dev.yml up
}

down () {
  docker compose down
}

down:dev () {
  docker compose -f docker-compose.dev.yml down --volumes --remove-orphans
}


server:bash () {
  docker exec -it bloglist-backend  bash
}

restart () {
  docker compose -f docker-compose.yml up
}

db:postgres () {
  docker exec -it temp-db-1 psql -U postgres postgres
}

exercise13.3-db:postgres () {
  docker exec -it exercise13.3-db psql -U postgres postgres
}

exercise13.3-db:down () {
  docker rm exercise_13.3-db
  docker rmi -f exercise_13.3-db
}

db:init () {
  exercise13.3-db:
}

exercise13.3-db:build () {
  # docker run --name exercise13.3-db -e POSTGRES_PASSWORD=mysecretpassword -p 5432:5432 -v postgres-data:/usr/src/app/postgresql/data postgres
  docker build -f exercise_13.Dockerfile -t exercise_13.3-db .
  # wait
  # docker run --name exercise13.3-db -e POSTGRES_PASSWORD=mysecretpassword -p 5432:5432 postgres

}
exercise13.3-db:run () {
  exercise13.3-db:build

  wait

  docker run --name exercise13.3-db -e POSTGRES_PASSWORD=mysecretpassword -p 5432:5432 exercise_13.3-db

}


exercise13.3-db:down () {
  docker rm -f exercise_13.3-db
  docker rmi -f exercise_13.3-db
}


case $COMMAND in
  up|up:dev|restart:dev|down|down:dev|db:postgres|server:bash|restart|exercise13.3-db|exercise13.3-db:down|exercise13.3-db:postgres|exercise13.3-db:run|exercise13.3-db:down)
      $COMMAND;;
  *)
      usage
      exit 1;;
esac
