#!/usr/bin/env bash

# stop on errors
set -e

# to echo
set -x

usage () {
  echo "patientor <command>"
  echo ""
  echo "Commands:"
  echo "---------"
  echo "up                        | builds the production docker container"
  echo "down                      | shuts down the container"
  echo "down:dev                  | shuts down the development container and removes all volumes and orphans"
  echo "up:dev                    | builds the developmnent container"
  echo "restart                   | restarts the production container without building"
  echo "restart:dev               | restarts the developmnent container without building"
  echo "server:bash               | opens a bash session in the server" 
  echo "db:init                   | initialize database with init.sql file"
  echo "db:post                   | opens a cli for postgress commands"
  echo "exercise13.3-db:postgres  | opens cli for postgres commands for exercise 13 database"
  echo "exercise13.3-db:run       | builds and runs the container for postgres db for exercise 13"
  echo "exercise13.3-db:down      | removes the docker container for the db for exercise 13"
  echo "db:shell                  | opens a bash session for the database"
}

if [ -z $1 ]
then
  usage
  exit 0
fi

COMMAND=$1

shift

REST_ARGS=$*

PROJECT=blogs_backend
API="${PROJECT}-web-1"
UI="${PROJECT}-ux-1"
DB="${PROJECT}-db-1"
ADMINER="${PROJECT}-adminer-1"

up () {
  docker compose up --build
}

up:dev () {
  docker compose -f docker-compose.dev.yml up --build
}

restart:dev () {
  docker compose -f docker-compose.dev.yml up
}

down () {
  docker compose down
}

down:dev () {
  docker compose -f docker-compose.dev.yml down --volumes --remove-orphans
}


server:bash () {
  docker exec -it bloglist-backend  bash
}

restart () {
  docker compose -f docker-compose.yml up
}

db:dump () {
  exercise13.3-db:run
  wait 
  docker exec -it exercise13.3-db-1 pg_dump -U postgres -d blogs > /postgres-data/blogs_backup.sql
  wait
  docker exec -it exercise13.3-db-1 pg_dump -U postgres -d users > /postgres-data/users_backup.sql
  wait
  exercise13.3-db:down
}

db:bash () {
  docker exec -it db-1 bash
}

db:init () {
  docker cp "${PWD}/postgres-data/init.sql" db-1:docker-entrypoint-initdb.d
  docker exec -i db-1 psql -U postgres -d postgres -a -f "docker-entrypoint-initdb.d/init.sql"
}


db:postgres () {
  docker exec -it db-1 psql -U postgres postgres
}

exercise13.3-db:postgres () {
  docker exec -it exercise13.3-db psql -U postgres postgres
}

exercise13.3-db:down () {
  docker rm exercise_13.3-db
  docker rmi -f exercise_13.3-db
}

exercise13.3-db:build () {
  docker build -f exercise_13.Dockerfile -t exercise_13.3-db .
}

exercise13.3-db:run () {
  exercise13.3-db:build

  wait

  docker run --name exercise13.3-db -e POSTGRES_PASSWORD=mysecretpassword -p 5432:5432 exercise_13.3-db
}


exercise13.3-db:down () {
  docker stop exercise13.3-db 
  docker rm -f exercise13.3-db
  docker rmi -f exercise_13.3-db
}




case $COMMAND in
  up|restart|down|up:dev|restart:dev|down:dev|db:postgres|server:bash|exercise13.3-db|exercise13.3-db:down|exercise13.3-db:postgres|exercise13.3-db:run|exercise13.3-db:down|db:bash|db:dump|db:init|db:postgres)
      $COMMAND;;
  *)
      usage
      exit 1;;
esac
